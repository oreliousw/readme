// (c) Mr O - Market Emotion Strategy v1.6.6 (Pip Simulator Merged, OANDA-Ready)
//@version=6
strategy("MES v1.6.6", shorttitle="MES v1.6.6", overlay=true,
     initial_capital=620,
     default_qty_type=strategy.fixed,
     commission_type=strategy.commission.cash_per_order,
     commission_value=0.0,
     pyramiding=0)

//──────────────────────────────────────────────
// 🔍 INPUTS
//──────────────────────────────────────────────
volLen   = input.int(20, "Volume SMA Length")
rngLen   = input.int(14, "Range SMA Length")
showBg   = input.bool(true, "Show Background Mood")
showLbls = input.bool(true, "Show Emotion Labels")
showVolC = input.bool(true, "Color Volume Bars")
showDock = input.bool(true, "Show Dock Panel Summary")
useMTF   = input.bool(true, "Enable Multi-Timeframe Analysis (15M, 1H, 4H)")
pipTargetUSD = input.float(1.0, "Target $/Pip Value")
leverage = input.float(50.0, "Leverage (Simulated)")
showDebug = input.bool(true, "Show Debug Info")

//──────────────────────────────────────────────
// 🔍 MTF DATA FETCH FUNCTION
//──────────────────────────────────────────────
// Helper to grab OHLCV as array for clean security calls
f_mtf_array() => [open, close, high, low, volume]

//──────────────────────────────────────────────
// 📡 MTF DATA FETCH
//──────────────────────────────────────────────
[o15, c15, h15, l15, v15] = request.security(syminfo.tickerid, "15", f_mtf_array())
[o1h, c1h, h1h, l1h, v1h] = request.security(syminfo.tickerid, "60", f_mtf_array())
[o4h, c4h, h4h, l4h, v4h] = request.security(syminfo.tickerid, "240", f_mtf_array())

//──────────────────────────────────────────────
// 🧮 CALCULATIONS - NATIVE TF
//──────────────────────────────────────────────
trNow      = ta.tr(true)
volSMA     = ta.sma(volume, volLen)
rngSMA     = ta.sma(trNow, rngLen)
volRatio   = nz(volume / volSMA, 0)
rngRatio   = nz(trNow / rngSMA, 0)
volRatioSm = ta.ema(volRatio, 3)
rngRatioSm = ta.ema(rngRatio, 3)
isBull     = close > open
isBear     = close < open
bodyRatio  = math.abs(close - open) / nz(trNow, 0.0001)  // Avoid divide-by-zero

//──────────────────────────────────────────────
// 🧮 CALCULATIONS - 15M
//──────────────────────────────────────────────
tr15        = math.max(h15 - l15, math.abs(h15 - c15[1]), math.abs(l15 - c15[1]))
volSMA15    = ta.sma(v15, volLen)
rngSMA15    = ta.sma(tr15, rngLen)
volRatio15  = nz(v15 / volSMA15, 0)
rngRatio15  = nz(tr15 / rngSMA15, 0)
volRatioSm15= ta.ema(volRatio15, 3)
rngRatioSm15= ta.ema(rngRatio15, 3)
isBull15    = c15 > o15
isBear15    = c15 < o15
bodyRatio15 = math.abs(c15 - o15) / nz(tr15, 0.0001)

//──────────────────────────────────────────────
// 🧮 CALCULATIONS - 1H
//──────────────────────────────────────────────
tr1h        = math.max(h1h - l1h, math.abs(h1h - c1h[1]), math.abs(l1h - c1h[1]))
volSMA1h    = ta.sma(v1h, volLen)
rngSMA1h    = ta.sma(tr1h, rngLen)
volRatio1h  = nz(v1h / volSMA1h, 0)
rngRatio1h  = nz(tr1h / rngSMA1h, 0)
volRatioSm1h= ta.ema(volRatio1h, 3)
rngRatioSm1h= ta.ema(rngRatio1h, 3)
isBull1h    = c1h > o1h
isBear1h    = c1h < o1h
bodyRatio1h = math.abs(c1h - o1h) / nz(tr1h, 0.0001)

//──────────────────────────────────────────────
// 🧮 CALCULATIONS - 4H
//──────────────────────────────────────────────
tr4h        = math.max(h4h - l4h, math.abs(h4h - c4h[1]), math.abs(l4h - c4h[1]))
volSMA4h    = ta.sma(v4h, volLen)
rngSMA4h    = ta.sma(tr4h, rngLen)
volRatio4h  = nz(v4h / volSMA4h, 0)
rngRatio4h  = nz(tr4h / rngSMA4h, 0)
volRatioSm4h= ta.ema(volRatio4h, 3)
rngRatioSm4h= ta.ema(rngRatio4h, 3)
isBull4h    = c4h > o4h
isBear4h    = c4h < o4h
bodyRatio4h = math.abs(c4h - o4h) / nz(tr4h, 0.0001)

//──────────────────────────────────────────────
// 😟 EMOTION STATES - NATIVE
//──────────────────────────────────────────────
strength     = bodyRatio * volRatio
fear         = isBear and volRatioSm > 1.2 and rngRatioSm > 1.1 and strength > 0.5
capitulation = isBear and volRatioSm > 2.0 and rngRatioSm > 1.5 and close > low[1]
hope         = isBull and volRatioSm > 0.9 and rngRatioSm < 1.0
confidence   = isBull and close > close[1] and high > high[1] and volRatioSm > 1.1 and rngRatioSm > 1.0 and strength > 0.6
greed        = isBull and volRatioSm > 1.8 and rngRatioSm > 1.3 and bodyRatio > 0.8
indecision   = rngRatioSm < 0.7 or (math.abs(close - open) < (trNow * 0.25))
neutral      = not (fear or capitulation or hope or confidence or greed or indecision)

//──────────────────────────────────────────────
// 😟 EMOTION STATES - 15M / 1H / 4H
//──────────────────────────────────────────────
strength15     = bodyRatio15 * volRatio15
fear15         = isBear15 and volRatioSm15 > 1.2 and rngRatioSm15 > 1.1 and strength15 > 0.5
capitulation15 = isBear15 and volRatioSm15 > 2.0 and rngRatioSm15 > 1.5 and c15 > l15[1]
hope15         = isBull15 and volRatioSm15 > 0.9 and rngRatioSm15 < 1.0
confidence15   = isBull15 and c15 > c15[1] and h15 > h15[1] and volRatioSm15 > 1.1 and rngRatioSm15 > 1.0 and strength15 > 0.6
greed15        = isBull15 and volRatioSm15 > 1.8 and rngRatioSm15 > 1.3 and bodyRatio15 > 0.8
indecision15   = rngRatioSm15 < 0.7 or (math.abs(c15 - o15) < (tr15 * 0.25))
neutral15      = not (fear15 or capitulation15 or hope15 or confidence15 or greed15 or indecision15)

strength1h     = bodyRatio1h * volRatio1h
fear1h         = isBear1h and volRatioSm1h > 1.2 and rngRatioSm1h > 1.1 and strength1h > 0.5
capitulation1h = isBear1h and volRatioSm1h > 2.0 and rngRatioSm1h > 1.5 and c1h > l1h[1]
hope1h         = isBull1h and volRatioSm1h > 0.9 and rngRatioSm1h < 1.0
confidence1h   = isBull1h and c1h > c1h[1] and h1h > h1h[1] and volRatioSm1h > 1.1 and rngRatioSm1h > 1.0 and strength1h > 0.6
greed1h        = isBull1h and volRatioSm1h > 1.8 and rngRatioSm1h > 1.3 and bodyRatio1h > 0.8
indecision1h   = rngRatioSm1h < 0.7 or (math.abs(c1h - o1h) < (tr1h * 0.25))
neutral1h      = not (fear1h or capitulation1h or hope1h or confidence1h or greed1h or indecision1h)

strength4h     = bodyRatio4h * volRatio4h
fear4h         = isBear4h and volRatioSm4h > 1.2 and rngRatioSm4h > 1.1 and strength4h > 0.5
capitulation4h = isBear4h and volRatioSm4h > 2.0 and rngRatioSm4h > 1.5 and c4h > l4h[1]
hope4h         = isBull4h and volRatioSm4h > 0.9 and rngRatioSm4h < 1.0
confidence4h   = isBull4h and c4h > c4h[1] and h4h > h4h[1] and volRatioSm4h > 1.1 and rngRatioSm4h > 1.0 and strength4h > 0.6
greed4h        = isBull4h and volRatioSm4h > 1.8 and rngRatioSm4h > 1.3 and bodyRatio4h > 0.8
indecision4h   = rngRatioSm4h < 0.7 or (math.abs(c4h - o4h) < (tr4h * 0.25))
neutral4h      = not (fear4h or capitulation4h or hope4h or confidence4h or greed4h or indecision4h)

//──────────────────────────────────────────────
// 📊 SENTIMENT SYNC INDEX (SSI) + DOCK PANEL
//──────────────────────────────────────────────
scoreTF(tfHope, tfConf, tfGreed, tfFear, tfCapit, tfIndec) =>
    (tfHope ? 1 : 0) + (tfConf ? 1.5 : 0) + (tfGreed ? 2 : 0) - (tfFear ? 1 : 0) - (tfCapit ? 1.5 : 0) - (tfIndec ? 0.5 : 0)

// Use the actual TFs for scoring
score15 = scoreTF(hope15, confidence15, greed15, fear15, capitulation15, indecision15)
score1h = scoreTF(hope1h, confidence1h, greed1h, fear1h, capitulation1h, indecision1h)
score4h = scoreTF(hope4h, confidence4h, greed4h, fear4h, capitulation4h, indecision4h)

// Normalize to −3..+3
ssiRaw = (score15 + score1h + score4h) / 3
ssi = math.min(math.max(ssiRaw, -3), 3)
ssiColor = ssi > 1   ? color.new(color.lime, 60) :
           ssi < -1  ? color.new(color.red, 60)  :
           ssi > 0   ? color.new(color.green, 70):
           ssi < 0   ? color.new(color.orange, 70):
                       color.new(color.gray, 80)
plot(ssi, "Sentiment Sync Index", color=color.new(color.aqua, 40), linewidth=2)  // Tip: Scale chart or split pane for visibility

// Early mood calc for dock
mood = fear ? "Fear" :
       capitulation ? "Capitulation" :
       hope ? "Hope" :
       confidence ? "Confidence" :
       greed ? "Greed" :
       indecision ? "Indecision" :
       neutral ? "Neutral" : "Unknown"

// Create dock before filling cells
var table dock = na
if showDock and na(dock)
    dock := table.new(position.top_right, 1, useMTF ? 5 : 1)

// Fill dock cells
if showDock
    dockColor = isBull ? color.new(color.lime, 70) : color.new(color.red, 70)
    arrow     = isBull ? "↑" : isBear ? "↓" : "→"
    table.cell(dock, 0, 0, str.format("Chart: {0} {1}\nVol {2}x Range {3}x", arrow, mood, str.tostring(volRatio, "#.##"), str.tostring(rngRatio, "#.##")), text_color=color.white, bgcolor=dockColor, text_size=size.small)
    if useMTF
        dockColor15 = isBull15 ? color.new(color.lime, 70) : color.new(color.red, 70)
        arrow15     = isBull15 ? "↑" : isBear15 ? "↓" : "→"
        mood15txt   = fear15 ? "Fear" : capitulation15 ? "Capitulation" : hope15 ? "Hope" : confidence15 ? "Confidence" : greed15 ? "Greed" : indecision15 ? "Indecision" : "Neutral"
        table.cell(dock, 0, 1, str.format("15M: {0} {1}\nVol {2}x Range {3}x", arrow15, mood15txt, str.tostring(volRatio15, "#.##"), str.tostring(rngRatio15, "#.##")), text_color=color.white, bgcolor=dockColor15, text_size=size.small)

        dockColor1h = isBull1h ? color.new(color.lime, 70) : color.new(color.red, 70)
        arrow1h     = isBull1h ? "↑" : isBear1h ? "↓" : "→"
        mood1htxt   = fear1h ? "Fear" : capitulation1h ? "Capitulation" : hope1h ? "Hope" : confidence1h ? "Confidence" : greed1h ? "Greed" : indecision1h ? "Indecision" : "Neutral"
        table.cell(dock, 0, 2, str.format("1H: {0} {1}\nVol {2}x Range {3}x", arrow1h, mood1htxt, str.tostring(volRatio1h, "#.##"), str.tostring(rngRatio1h, "#.##")), text_color=color.white, bgcolor=dockColor1h, text_size=size.small)

        dockColor4h = isBull4h ? color.new(color.lime, 70) : color.new(color.red, 70)
        arrow4h     = isBull4h ? "↑" : isBear4h ? "↓" : "→"
        mood4htxt   = fear4h ? "Fear" : capitulation4h ? "Capitulation" : hope4h ? "Hope" : confidence4h ? "Confidence" : greed4h ? "Greed" : indecision4h ? "Indecision" : "Neutral"
        table.cell(dock, 0, 3, str.format("4H: {0} {1}\nVol {2}x Range {3}x", arrow4h, mood4htxt, str.tostring(volRatio4h, "#.##"), str.tostring(rngRatio4h, "#.##")), text_color=color.white, bgcolor=dockColor4h, text_size=size.small)

        table.cell(dock, 0, 4, str.format("Sync Index: {0}", str.tostring(ssi, "#.##")), text_color=color.white, bgcolor=ssiColor, text_size=size.small)

//──────────────────────────────────────────────
// 🔢 SSI THRESHOLDS
//──────────────────────────────────────────────
ssiLongOK = ssi > 0.3
ssiShortOK = ssi < -0.3
ssiNeutral = not (ssiLongOK or ssiShortOK)

//──────────────────────────────────────────────
// 💵 DYNAMIC PIP VALUE SIMULATOR
//──────────────────────────────────────────────
// Most majors use 0.0001 per pip; JPY pairs use 0.01
pipSize = if str.contains(syminfo.ticker, "JPY")
    0.01
else
    0.0001
// USD value per unit per pip for USD quote pairs (simplified)
usdPerUnit = pipSize
unitsNeeded = pipTargetUSD / usdPerUnit
// Scale down slightly for leverage realism
unitsSim = unitsNeeded / leverage

//──────────────────────────────────────────────
// 🧾 DEBUG PANEL (OPTIONAL)
//──────────────────────────────────────────────
if showDebug
    var label debugLbl = na
    label.delete(debugLbl)
    debugTxt = str.format("Pair: {0}\nPip Size: {1}\nTarget $/Pip: {2}\nUnits ≈ {3}\nEffective Leverage: {4}",
         syminfo.ticker, str.tostring(pipSize), str.tostring(pipTargetUSD),
         str.tostring(math.round(unitsSim)), str.tostring(leverage))
    debugLbl := label.new(bar_index, high, debugTxt, style=label.style_label_left,
         textcolor=color.white, color=color.new(color.blue,70))

//──────────────────────────────────────────────
// 🎨 VISUALS: BACKGROUND + LABELS
//──────────────────────────────────────────────
bgColor = fear ? color.new(color.red, 75) :
          capitulation ? color.new(color.maroon, 70) :
          hope ? color.new(color.green, 80) :
          confidence ? color.new(color.lime, 70) :
          greed ? color.new(color.yellow, 70) :
          indecision ? color.new(color.gray, 85) :
          neutral ? color.new(color.silver, 85) : na
finalBg = ssiNeutral ? color.new(color.gray, 90) : showBg ? bgColor : na
bgcolor(finalBg)

var string lastMood = ""
if showLbls and mood != lastMood
    label.new(bar_index, high, mood, style=label.style_label_down, textcolor=color.white, color=color.new(color.black, 60), size=size.tiny)
    lastMood := mood

//──────────────────────────────────────────────
// 🎨 VISUALS: VOLUME COLUMNS
//──────────────────────────────────────────────
volCol = fear ? color.red :
         capitulation ? color.maroon :
         hope ? color.green :
         confidence ? color.lime :
         greed ? color.yellow :
         indecision ? color.gray :
         neutral ? color.silver : color.gray
plot(showVolC ? volume : na, style=plot.style_columns, color=volCol, title="Emotion Volume")

//──────────────────────────────────────────────
// 🧠 SSI-Filtered Strategy Logic
//──────────────────────────────────────────────
wasFearOrCap_native = fear[1] or capitulation[1]
wasGreed_native     = greed[1]
wasFearOrCap = useMTF ? (wasFearOrCap_native or fear15[1] or capitulation15[1] or fear1h[1] or capitulation1h[1] or fear4h[1] or capitulation4h[1]) : wasFearOrCap_native
wasGreed    = useMTF ? (wasGreed_native or greed15[1] or greed1h[1] or greed4h[1]) : wasGreed_native

toHopeOrConf  = (hope or confidence) and wasFearOrCap
toIndecOrFear = (indecision or fear) and wasGreed

// Longs only when SSI bullish
if toHopeOrConf and ssiLongOK
    strategy.entry("Long_Emotion", strategy.long, qty=unitsSim, comment="SSI-Filtered Long")

// Shorts only when SSI bearish
if toIndecOrFear and ssiShortOK
    strategy.entry("Short_Emotion", strategy.short, qty=unitsSim, comment="SSI-Filtered Short")

// Optional: prevent new trades in neutral zone
if ssiNeutral
    strategy.cancel_all()

// Exits unchanged
if strategy.position_size > 0 and (greed or indecision)
    strategy.close("Long_Emotion", comment="Long Exit: Opposite Mood")
if strategy.position_size < 0 and (hope or confidence)
    strategy.close("Short_Emotion", comment="Short Exit: Opposite Mood")

//──────────────────────────────────────────────
// 🔔 ALERTS
//──────────────────────────────────────────────
alertcondition(greed, "Extreme Greed", "Market showing strong greed sentiment.")
alertcondition(capitulation, "Capitulation", "Possible panic bottom forming.")
// Alerts for strong alignment
alertcondition(ssi > 1.5, "Strong Bullish Sync", "All TFs aligned bullish.")
alertcondition(ssi < -1.5, "Strong Bearish Sync", "All TFs aligned bearish.")
